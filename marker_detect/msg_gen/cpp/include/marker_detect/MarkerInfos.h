/* Auto-generated by genmsg_cpp for file /home/annal/ros_workspace/ar_marker_tools/marker_detect/msg/MarkerInfos.msg */
#ifndef MARKER_DETECT_MESSAGE_MARKERINFOS_H
#define MARKER_DETECT_MESSAGE_MARKERINFOS_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "std_msgs/Header.h"
#include "geometry_msgs/Pose.h"

namespace marker_detect
{
template <class ContainerAllocator>
struct MarkerInfos_ {
  typedef MarkerInfos_<ContainerAllocator> Type;

  MarkerInfos_()
  : header()
  , poses()
  , ids()
  {
  }

  MarkerInfos_(const ContainerAllocator& _alloc)
  : header(_alloc)
  , poses(_alloc)
  , ids(_alloc)
  {
  }

  typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
   ::std_msgs::Header_<ContainerAllocator>  header;

  typedef std::vector< ::geometry_msgs::Pose_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Pose_<ContainerAllocator> >::other >  _poses_type;
  std::vector< ::geometry_msgs::Pose_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Pose_<ContainerAllocator> >::other >  poses;

  typedef std::vector<uint32_t, typename ContainerAllocator::template rebind<uint32_t>::other >  _ids_type;
  std::vector<uint32_t, typename ContainerAllocator::template rebind<uint32_t>::other >  ids;


  typedef boost::shared_ptr< ::marker_detect::MarkerInfos_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::marker_detect::MarkerInfos_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct MarkerInfos
typedef  ::marker_detect::MarkerInfos_<std::allocator<void> > MarkerInfos;

typedef boost::shared_ptr< ::marker_detect::MarkerInfos> MarkerInfosPtr;
typedef boost::shared_ptr< ::marker_detect::MarkerInfos const> MarkerInfosConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::marker_detect::MarkerInfos_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::marker_detect::MarkerInfos_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace marker_detect

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::marker_detect::MarkerInfos_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::marker_detect::MarkerInfos_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::marker_detect::MarkerInfos_<ContainerAllocator> > {
  static const char* value() 
  {
    return "f3f79af4b0eb424078e99821e4a7f9f6";
  }

  static const char* value(const  ::marker_detect::MarkerInfos_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xf3f79af4b0eb4240ULL;
  static const uint64_t static_value2 = 0x78e99821e4a7f9f6ULL;
};

template<class ContainerAllocator>
struct DataType< ::marker_detect::MarkerInfos_<ContainerAllocator> > {
  static const char* value() 
  {
    return "marker_detect/MarkerInfos";
  }

  static const char* value(const  ::marker_detect::MarkerInfos_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::marker_detect::MarkerInfos_<ContainerAllocator> > {
  static const char* value() 
  {
    return "Header header\n\
geometry_msgs/Pose[] poses\n\
uint32[] ids\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose\n\
# A representation of pose in free space, composed of postion and orientation. \n\
Point position\n\
Quaternion orientation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
\n\
";
  }

  static const char* value(const  ::marker_detect::MarkerInfos_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct HasHeader< ::marker_detect::MarkerInfos_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct HasHeader< const ::marker_detect::MarkerInfos_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::marker_detect::MarkerInfos_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.header);
    stream.next(m.poses);
    stream.next(m.ids);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct MarkerInfos_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::marker_detect::MarkerInfos_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::marker_detect::MarkerInfos_<ContainerAllocator> & v) 
  {
    s << indent << "header: ";
s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "poses[]" << std::endl;
    for (size_t i = 0; i < v.poses.size(); ++i)
    {
      s << indent << "  poses[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "    ", v.poses[i]);
    }
    s << indent << "ids[]" << std::endl;
    for (size_t i = 0; i < v.ids.size(); ++i)
    {
      s << indent << "  ids[" << i << "]: ";
      Printer<uint32_t>::stream(s, indent + "  ", v.ids[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // MARKER_DETECT_MESSAGE_MARKERINFOS_H

